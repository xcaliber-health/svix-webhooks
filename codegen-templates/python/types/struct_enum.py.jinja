{% set type_name = type.name | to_upper_camel_case -%}
import typing as t
from typing_extensions import Self
from pydantic import ModelWrapValidatorHandler, model_validator
from datetime import datetime
from .common import BaseModel

{% for c in referenced_components %}
from . {{ c | to_snake_case }} import {{ c | to_upper_camel_case }}
{%- endfor %}

class {{ type_name }}(BaseModel):
    {% include "types/struct_fields.py.jinja" %}
    {{ type.discriminator_field }}: t.Union[
        {% for variant in type.variants -%}
            t.Literal["{{ variant.name }}"] {% if not loop.last %},{% endif %}
        {% endfor -%}
    ]
    {{ type.content_field }}: t.Union[
        {% set content_field_types = [] %}
        {{ type.variants| map(attribute="schema_ref", default="t.Dict[str,t.Any]") | unique | join(",") }}        
    ]

    @model_validator(mode="wrap")
    @classmethod
    def validate_model(
        cls, data: t.Any, handler: ModelWrapValidatorHandler[Self]
    ) -> Self:
        output = handler(data)
        {% for v in type.variants -%}

        
        {% if loop.first -%}if{% else %}elif{% endif %} output.type == "{{ v.name }}":
            {%- if v.schema_ref is defined %}
            output.{{ type.content_field | to_snake_case }} = {{ v.schema_ref | to_upper_camel_case }}.model_validate(data.get("{{ type.content_field }}", {}))
            {%- else %}
            output.{{ type.content_field | to_snake_case }} = data.get("{{ type.content_field }}", {})
            {%- endif %}
        {% endfor -%}
        else:
            raise ValueError(f"Unexpected type `{output.type}`")
        return output

